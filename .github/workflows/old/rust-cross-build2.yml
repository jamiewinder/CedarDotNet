name: Build, Test, and Publish

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
jobs:
  build-matrix:
    name: Build & Test - ${{ matrix.os }} ${{ matrix.arch }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            arch: x64
            rust_target: x86_64-unknown-linux-gnu
            runtime: linux-x64
          #- os: ubuntu-latest
          #  arch: arm64
          #  rust_target: aarch64-unknown-linux-gnu
          #  runtime: linux-arm64
          - os: windows-latest
            arch: x64
            rust_target: x86_64-pc-windows-msvc
            runtime: win-x64
          #- os: windows-latest
          #  arch: arm64
          #  rust_target: aarch64-pc-windows-msvc
          #  runtime: win-arm64
          #- os: macos-latest
          #  arch: x64
          #  rust_target: x86_64-apple-darwin
          #  runtime: osx-x64
          #- os: macos-latest
          #  arch: arm64
          #  rust_target: aarch64-apple-darwin
          #  runtime: osx-arm64

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.rust_target }}
          override: true

      - name: Add Rust target
        run: rustup target add ${{ matrix.rust_target }}

      - name: Build Rust FFI library
        run: |
          cd src/CedarDotNetFfi
          cargo build --release --target ${{ matrix.rust_target }}

      - name: Copy native library
        run: |
          mkdir -p src/CedarDotNet/runtimes/${{ matrix.runtime }}/native

          case "${{ matrix.os }}" in
            ubuntu-*)  ext="so" ;;
            macos-*)   ext="dylib" ;;
            windows-*) ext="dll" ;;
          esac

          find src/CedarDotNetFfi/target/${{ matrix.rust_target }}/release -name "*.${ext}" \
            -exec cp {} src/CedarDotNet/runtimes/${{ matrix.runtime }}/native/ \;
        shell: bash

      - name: Restore & test
        run: |
          dotnet restore
          dotnet test --configuration Release

  package-and-publish:
    name: Package & Publish
    needs: build-matrix
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Pack NuGet Package
        run: |
          dotnet pack src/CedarDotNet/CedarDotNet.csproj --configuration Release --output ./nupkgs /p:PackageVersion=0.0.0

      - name: Upload NuGet package artifact
        uses: actions/upload-artifact@v4
        with:
          name: cedar-nuget
          path: ./nupkgs/*.nupkg

      #- name: Push to NuGet
      #  run: dotnet nuget push ./nupkgs/*.nupkg --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json